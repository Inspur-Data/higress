name: Build and Push Wasm Plugin Image For Docker

# 触发条件
on:
  push:
    branches:
    - upgrade-plugin
  workflow_dispatch:
    inputs:
      plugin_type:
        description: 'Type of the plugin'
        required: true
        type: choice
        options:
          - go
          - rust
      plugin_name:
        description: 'Name of the plugin'
        required: true
        type: string
      version:
        description: 'Version of the plugin (optional, without leading v)'
        required: false
        type: string

jobs:
  build-and-push-wasm-plugin-image:
    runs-on: ubuntu-latest
    environment:
      name: image-registry-msg
    env:
      IMAGE_REGISTRY_SERVICE: ${{ vars.IMAGE_REGISTRY || 'registry.cn-hangzhou.aliyuncs.com' }}
      IMAGE_REPOSITORY: ${{ vars.PLUGIN_IMAGE_REPOSITORY || 'testwydimage' }}
      RUST_VERSION: 1.82
      GO_VERSION: 1.24.0
      ORAS_VERSION: 1.0.0
    strategy:
      matrix:
        arch: ["amd64", "arm64"]
    steps:
      - name: Set plugin_type, plugin_name and version from inputs or ref_name
        id: set_vars
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            plugin_type="${{ github.event.inputs.plugin_type }}"
            plugin_name="${{ github.event.inputs.plugin_name }}"
            version="${{ github.event.inputs.version }}"
          else
            ref_name=${{ github.ref_name }}
            plugin_type=${ref_name#*-} # 删除插件类型前面的字段(wasm-)
            plugin_type=${plugin_type%%-*} # 删除插件类型后面的字段(-{plugin_name}-vX.Y.Z)
            plugin_name=${ref_name#*-*-} # 删除插件名前面的字段(wasm-go-)
            plugin_name=${plugin_name%-*} # 删除插件名后面的字段(-vX.Y.Z)
            version=$(echo "$ref_name" | awk -F'v' '{print $2}')
          fi
          if [[ "$plugin_type" == "rust" ]]; then
            builder_image="higress-registry.cn-hangzhou.cr.aliyuncs.com/plugins/wasm-rust-builder:rust${{ env.RUST_VERSION }}-oras${{ env.ORAS_VERSION }}"
          else
            builder_image="higress-registry.cn-hangzhou.cr.aliyuncs.com/plugins/wasm-go-builder:go${{ env.GO_VERSION }}-oras${{ env.ORAS_VERSION }}"
          fi
          echo "PLUGIN_TYPE=$plugin_type" >> $GITHUB_ENV
          echo "PLUGIN_NAME=$plugin_name" >> $GITHUB_ENV
          echo "VERSION=$version" >> $GITHUB_ENV
          echo "BUILDER_IMAGE=$builder_image" >> $GITHUB_ENV

      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: File Check
        run: | 
          workspace=${{ github.workspace }}/plugins/wasm-${PLUGIN_TYPE}/extensions/${PLUGIN_NAME}
          push_command="./plugin.tar.gz:application/vnd.oci.image.layer.v1.tar+gzip"
          echo "PUSH_COMMAND_ORIGIN=\"$push_command\""
          # 查找spec.yaml
          if [ -f "${workspace}/spec.yaml" ]; then
            echo "spec.yaml exists"
            push_command="./spec.yaml:application/vnd.module.wasm.spec.v1+yaml $push_command "
          fi

          # 查找README.md
          if [ -f "${workspace}/README.md" ];then
              echo "README.md exists"
             # push_command="./README.md:application/vnd.module.wasm.doc.v1+markdown $push_command "
          fi
          
          # 查找README_{lang}.md
          for file in ${workspace}/README_*.md; do
            if [ -f "$file" ]; then
              file_name=$(basename $file)
              echo "$file_name exists"
              lang=$(basename $file | sed 's/README_//; s/.md//')
            #  push_command="./$file_name:application/vnd.module.wasm.doc.v1.$lang+markdown $push_command "
            fi
          done

          echo "PUSH_COMMAND=\"$push_command\"" >> $GITHUB_ENV
        
      - name: Run a wasm-builder
        env: 
          PLUGIN_NAME: ${{ env.PLUGIN_NAME }}
          BUILDER_IMAGE: ${{ env.BUILDER_IMAGE }}
        run: |
          docker run -itd --name builder -v ${{ github.workspace }}:/workspace -e PLUGIN_NAME=${{ env.PLUGIN_NAME }} --rm ${{ env.BUILDER_IMAGE }} /bin/bash

      - name: Build Image and Push
        run: |
          target_image="${{ env.IMAGE_REGISTRY_SERVICE }}/${{ env.IMAGE_REPOSITORY}}/${{ env.PLUGIN_NAME }}:${{ env.VERSION }}"
          target_image_latest="${{ env.IMAGE_REGISTRY_SERVICE }}/${{ env.IMAGE_REPOSITORY}}/${{ env.PLUGIN_NAME }}:latest"
          echo "TargetImage=${target_image}"
          echo "TargetImageLatest=${target_image_latest}"

          cd ${{ github.workspace }}/plugins/wasm-${PLUGIN_TYPE}/extensions/${PLUGIN_NAME}
          if [ -f ./.buildrc ]; then
            echo 'Found .buildrc file, sourcing it...'
            . ./.buildrc
          else
            echo '.buildrc file not found'
          fi
          echo "EXTRA_TAGS=${EXTRA_TAGS}"
          if [ "${PLUGIN_TYPE}" == "go" ]; then
          command="
          set -e
          cd /workspace/plugins/wasm-go/extensions/${PLUGIN_NAME}
          go clean -modcache
          go mod tidy
          GOOS=wasip1 GOARCH=wasm go build -buildmode=c-shared -o plugin.wasm .
          tar czvf plugin.tar.gz plugin.wasm
          "
          fi 
          docker exec builder bash -c "$command"
      - name: Copy binary from container to local
        run: |
          docker cp $(docker ps -alq):/workspace/plugins/wasm-go/extensions/${PLUGIN_NAME}/plugin.wasm ./plugin.wasm
      - name: Build Docker image with WASM binary
        run: |
          target_image="${{ env.IMAGE_REGISTRY_SERVICE }}/${{ env.IMAGE_REPOSITORY}}/${{ env.PLUGIN_NAME }}:${{ env.VERSION }}-${{ matrix.arch }}"
          target_image_latest="${{ env.IMAGE_REGISTRY_SERVICE }}/${{ env.IMAGE_REPOSITORY}}/${{ env.PLUGIN_NAME }}:latest-${{ matrix.arch }}"
          echo "FROM scratch" > Dockerfile
          echo "COPY plugin.wasm /plugin.wasm" >> Dockerfile
          echo "TARGET_IMAGE=${target_image}"
          echo "TARGET_IMAGE_LATEST=${target_image}"
          docker login --username=${{ secrets.USERNAME_ALI }} registry.cn-hangzhou.aliyuncs.com -p ${{ secrets.PASSWORD_ALI }}
          docker buildx create --use
          docker buildx build --no-cache  --platform linux/${{ matrix.arch }} -f Dockerfile -t ${target_image} --push .
          docker buildx build --no-cache  --platform linux/${{ matrix.arch }} -f Dockerfile -t ${target_image_latest} --push .
          
          
          
          
          
