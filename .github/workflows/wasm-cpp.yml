name: CPP Build and Push Wasm Plugin Image For Docker

on:
  push:
    branches:
      - release-1.x
  workflow_dispatch:
    inputs:
      plugin_type:
        description: 'Type of the plugin'
        required: true
        type: choice
        options:
          - cpp
      plugin_name:
        description: 'Name of the plugin'
        required: true
        type: string
      version:
        description: 'Version of the plugin (optional, without leading v)'
        required: false
        type: string

jobs:
  build-and-push-wasm-plugin-image:
    runs-on: ubuntu-latest
    environment:
      name: image-registry-msg
    env:
      IMAGE_REGISTRY_SERVICE: ${{ vars.IMAGE_REGISTRY || 'registry.cn-hangzhou.aliyuncs.com' }}
      IMAGE_REPOSITORY: ${{ vars.PLUGIN_IMAGE_REPOSITORY || 'testwydimage' }}
      RUST_VERSION: 1.82
      GO_VERSION: 1.19
      TINYGO_VERSION: 0.28.1
      ORAS_VERSION: 1.0.0
    strategy:
      matrix:
        arch: ["amd64"]
    steps:
      - name: Set plugin_type, plugin_name and version from inputs or ref_name
        id: set_vars
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            plugin_type="${{ github.event.inputs.plugin_type }}"
            plugin_name="${{ github.event.inputs.plugin_name }}"
            version="${{ github.event.inputs.version }}"
          else
            ref_name=${{ github.ref_name }}
            plugin_type=${ref_name#*-} # 删除插件类型前面的字段(wasm-)
            plugin_type=${plugin_type%%-*} # 删除插件类型后面的字段(-{plugin_name}-vX.Y.Z)
            plugin_name=${ref_name#*-*-} # 删除插件名前面的字段(wasm-go-)
            plugin_name=${plugin_name%-*} # 删除插件名后面的字段(-vX.Y.Z)
            version=$(echo "$ref_name" | awk -F'v' '{print $2}')
          fi
          if [[ "$plugin_type" == "cpp" ]]; then
            builder_image="higress-registry.cn-hangzhou.cr.aliyuncs.com/higress/build-tools-proxy:release-1.19-ef344298e65eeb2d9e2d07b87eb4e715c2def613"
          else
            builder_image="higress-registry.cn-hangzhou.cr.aliyuncs.com/plugins/wasm-go-builder:go${{ env.GO_VERSION }}-tinygo${{ env.TINYGO_VERSION }}-oras${{ env.ORAS_VERSION }}"
          fi
          echo "PLUGIN_TYPE=$plugin_type" >> $GITHUB_ENV
          echo "PLUGIN_NAME=$plugin_name" >> $GITHUB_ENV
          echo "VERSION=ref: feature-branch$version" >> $GITHUB_ENV
          echo "BUILDER_IMAGE=$builder_image" >> $GITHUB_ENV

      - name: Checkout code
        uses: actions/checkout@v3
      - name: Run a wasm-builder
        env: 
          PLUGIN_NAME: ${{ env.PLUGIN_NAME }}
          BUILDER_IMAGE: ${{ env.BUILDER_IMAGE }}
        run: |
          docker run -itd --name builder -v ${{ github.workspace }}:/workspace -e PLUGIN_NAME=${{ env.PLUGIN_NAME }} --rm ${{ env.BUILDER_IMAGE }} /bin/bash

      - name: Build Image and Push
        run: |
          target_image="${{ env.IMAGE_REGISTRY_SERVICE }}/${{ env.IMAGE_REPOSITORY}}/${{ env.PLUGIN_NAME }}:${{ env.VERSION }}"
          target_image_latest="${{ env.IMAGE_REGISTRY_SERVICE }}/${{ env.IMAGE_REPOSITORY}}/${{ env.PLUGIN_NAME }}:latest"
          echo "TargetImage=${target_image}"
          echo "TargetImageLatest=${target_image_latest}"

          cd ${{ github.workspace }}/plugins/wasm-${PLUGIN_TYPE}/extensions/${PLUGIN_NAME}
          
          if [ "${PLUGIN_TYPE}" == "cpp" ]; then
          command="
          set -e
          cd /workspace/plugins/wasm-cpp
          bazel build //extensions/$PLUGIN_NAME:$PLUGIN_NAME.wasm
          bazel cquery //extensions/$PLUGIN_NAME:$PLUGIN_NAME.wasm --output=files
          BINARY_PATH=\$(bazel cquery //extensions/$PLUGIN_NAME:$PLUGIN_NAME.wasm --output=files)
          echo \$BINARY_PATH
          "
          fi 
          docker exec builder bash -c "$command"
      - name: Copy binary from container to local
        run: |
          docker cp $(docker ps -alq):/workspace/bazel-bin/extensions/$PLUGIN_NAME/$PLUGIN_NAME.wasm ./plugin.wasm
      - name: Upload binary as artifact
        uses: actions/upload-artifact@v3
        with:
          name: wasm-binary
          path: plugin.wasm
      - name: Build Docker image with WASM binary
        run: |
          target_image="${{ env.IMAGE_REGISTRY_SERVICE }}/${{ env.IMAGE_REPOSITORY}}/${{ env.PLUGIN_NAME }}:${{ env.VERSION }}-${{ matrix.arch }}"
          target_image_latest="${{ env.IMAGE_REGISTRY_SERVICE }}/${{ env.IMAGE_REPOSITORY}}/${{ env.PLUGIN_NAME }}:latest-${{ matrix.arch }}"
          echo "FROM scratch" > Dockerfile
          echo "COPY plugin.wasm /plugin.wasm" >> Dockerfile
          echo "TARGET_IMAGE=${target_image}"
          echo "TARGET_IMAGE_LATEST=${target_image}"
          docker login --username=${{ secrets.USERNAME_ALI }} registry.cn-hangzhou.aliyuncs.com -p ${{ secrets.PASSWORD_ALI }}
          docker buildx create --use
          docker buildx build --no-cache  --platform linux/${{ matrix.arch }} -f Dockerfile -t ${target_image} --push .
          docker buildx build --no-cache  --platform linux/${{ matrix.arch }} -f Dockerfile -t ${target_image_latest} --push .
